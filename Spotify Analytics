# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table and answered the following questions:

# 1. What is the avg popularity, danceability, and energy by artist and track. 
SELECT
artist_name
,track_name
,avg(popularity)
,avg(danceability)
,avg(energy)
FROM BIT_DB.spotifydata
GROUP BY artist_name, track_name

# 2. What artist released the longest song?

SELECT artist_name, MAX(duration_ms) AS max_duration
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY max_duration DESC
LIMIT 1;

# 3. What are the 20 most danceable songs

SELECT artist_name, track_name, danceability
FROM BIT_DB.Spotifydata
ORDER BY danceability DESC
LIMIT 20;

# 4. What songs have a valence greater than 0.8 (happy/positive songs) and order them by energy from highest to lowest.

SELECT track_name, valence, energy
FROM BIT_DB.Spotifydata
WHERE valence > 0.8
ORDER BY energy DESC;

# 5. What is the average loudness and tempo for each artist, and show only the top 10 artists with the highest average loudness.

SELECT artist_name, AVG(loudness) AS avg_loudness, AVG(tempo) AS avg_tempo
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY avg_loudness DESC
LIMIT 10;
